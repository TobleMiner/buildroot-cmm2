/*
 * Copyright 2017 - Alexandre Torgue <alexandre.torgue@st.com>
 * Copyright 2020 - Tobias Schramm <t.schramm@t-sys.eu>
 *
 * This file is dual-licensed: you can use it either under the terms
 * of the GPL or the X11 license, at your option. Note that this dual
 * licensing only applies to this file, and not this project as a
 * whole.
 *
 *  a) This file is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU General Public License as
 *     published by the Free Software Foundation; either version 2 of the
 *     License, or (at your option) any later version.
 *
 *     This file is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 * Or, alternatively,
 *
 *  b) Permission is hereby granted, free of charge, to any person
 *     obtaining a copy of this software and associated documentation
 *     files (the "Software"), to deal in the Software without
 *     restriction, including without limitation the rights to use,
 *     copy, modify, merge, publish, distribute, sublicense, and/or
 *     sell copies of the Software, and to permit persons to whom the
 *     Software is furnished to do so, subject to the following
 *     conditions:
 *
 *     The above copyright notice and this permission notice shall be
 *     included in all copies or substantial portions of the Software.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *     OTHER DEALINGS IN THE SOFTWARE.
 */

/dts-v1/;
#include "stm32h743.dtsi"
#include "stm32h743-pinctrl.dtsi"
#include <dt-bindings/gpio/gpio.h>

/ {
	model = "tbspace Colour Maximite 2";
	compatible = "tbspace,cmm2", "st,stm32h743";

	chosen {
		stdout-path = "serial0:921600n8";
	};

	// 32MiB SDRAM on FMC Bank 1
	memory@d0000000 {
		device_type = "memory";
		reg = <0xd0000000 0x2000000>;
	};

	// 2MiB DMA memory for LCD controller
	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		linux,dma {
			compatible = "shared-dma-pool";
			no-map;
			size = <0x200000>;
			alignment = <0x1000>;
			linux,dma-default;
		};
	};

	aliases {
		serial0 = &usart1;
	};

	vdd: regulator-vdd {
		compatible = "regulator-fixed";
		regulator-name = "vdd";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};

	// Unbearably slow, about 4KiB/s
        spi-gpio {
                compatible = "spi-gpio";
                #address-cells = <1>;
                #size-cells = <0>;
                cs-gpios = <&gpiod 2 GPIO_ACTIVE_LOW>;
                gpio-mosi = <&gpioc 12 0>;
                gpio-miso = <&gpioc 11 0>;
                gpio-sck = <&gpioc 10 0>;
                spi-delay-us = <0>;
                status = "disabled";

		mmc-slot@0 {
			compatible = "mmc-spi-slot";
			reg = <0>;
			gpios = <&gpiod 3 GPIO_ACTIVE_LOW>;
			pinctrl-0 = <&mmc_spi_pins>;
			pinctrl-names = "default";
			spi-cs-high;
			spi-max-frequency = <1000000>;
			voltage-ranges = <3300 3300>;
		};
        };

	// See https://github.com/Manawyrm/pata-gpio
	pata-gpio {
		compatible = "pata-gpio";

		address-gpios = <
			&gpiob 14 0
			&gpioi 3 0
			&gpioh 11 0
			>;

		cs-gpios = <
			&gpioa 1 1
			&gpioi 8 1
			>;

		databus-gpios = <
			&gpiob 3 0
			&gpiob 4 0
			&gpiob 5 0
			&gpioc 3 0
			&gpioc 2 0
			&gpioh 14 0
			&gpioc 1 0
			&gpiob 8 0
			&gpioa 2 0
			&gpioa 3 0
			&gpioa 6 0
			&gpioa 0 0
			&gpioa 15 0
			&gpioa 7 0
			&gpioc 4 0
			&gpioc 5 0
			>;

		reset-gpio = <&gpiob 9 1>;

		strobe-read-gpio = <&gpiob 0 1>;
		strobe-write-gpio = <&gpiob 7 1>;
	};

	// Generic panel for VGA
	lcd0: display@0 {
		compatible = "panel-dpi";
		label = "VGA";

		port {
			lcd_in: endpoint {
				remote-endpoint = <&ltdc_out_rgb>;
			};
		};

		// Standard 640x480 VGA timing
		panel-timing {
			clock-frequency = <23750000>;
			hactive = <640>;
			vactive = <480>;
			hfront-porch = <16>;
			hback-porch = <80>;
			hsync-len = <64>;
			vback-porch = <13>;
			vfront-porch = <3>;
			vsync-len = <4>;

			hsync-active = <0>;
			vsync-active = <0>;
			de-active = <1>;
			pixelclk-active = <1>;
		};
	};

	// Pretty broken, just good enough for the keyboard to work sometimes
	ps2@0 {
	        compatible = "ps2-gpio";
	        interrupt-parent = <&gpioa>;
	        interrupts = <12 IRQ_TYPE_EDGE_FALLING>;
	        data-gpios = <&gpioa 11 0x10>;
	        clk-gpios = <&gpioa 12 0x10>;
		status = "disabled";
	};
};

&ltdc {
	pinctrl-0 = <&ltdc_pins>;
	pinctrl-names = "default";
	status = "okay";

	port {
		ltdc_out_rgb: endpoint@0 {
			remote-endpoint = <&lcd_in>;
		};
	};
};

/*
&soc {
	ltdc: display-controller@50001000 {
		compatible = "st,stm32-ltdc";
		reg = <0x50001000 0x200>;
		interrupts = <88>, <89>;
		resets = <&rcc STM32H7_APB3_RESET(LTDC)>;
		clocks = <&rcc LTDC_CK>;
		clock-names = "lcd";
		pinctrl-0 = <&ltdc_pins>;
		pinctrl-names = "default";

		port {
			ltdc_out_rgb: endpoint@0 {
				remote-endpoint = <&lcd_in>;
			};
		};
	};
};
*/

&clk_hse {
	clock-frequency = <8000000>;
};

&rtc {
	status = "okay";
};

&sdmmc1 {
	status = "disabled";
};

&usart1 {
	// Overwrite compatible, default has no FIFO
	compatible = "st,stm32h7-uart";
	pinctrl-0 = <&usart1_alt_pins>;
	pinctrl-names = "default";
	status = "okay";
};

// Broken, phy reports transaction errors
&usbotg_fs {
	compatible = "st,stm32f7-hsotg";
//	pinctrl-0 = <&usbotg_pins>;
//	pinctrl-names = "default";
//	phys = <&usbotg_hs_phy>;
//	phy-names = "usb-phy";
	dr_mode = "host";
//	resets = <&rcc STM32H7_AHB1_RESET(USB2OTG)>;
	st,hs-before-reset;
	status = "disabled";
};

&dma1 {
	status = "disabled";
};

// Broken for some reason, no activity on MOSI
&spi3 {
	cs-gpios = <&gpiod 2 GPIO_ACTIVE_LOW>;
	pinctrl-0 = <&spi3_pins>;
	pinctrl-names = "default";
	status = "disabled";

	mmc-slot@0 {
		compatible = "mmc-spi-slot";
		reg = <0>;
		debug-gpios = <&gpioa 2 0 &gpioa 3 0 &gpioa 6 0>;
		gpios = <&gpiod 3 GPIO_ACTIVE_LOW>;
		pinctrl-0 = <&mmc_spi_pins>;
		pinctrl-names = "default";
		spi-cs-high; // bug?
		spi-max-frequency = <10000000>;
		voltage-ranges = <3300 3300>;
	};
};

&i2c2 {
	pinctrl-0 = <&i2c2_pins>;
	pinctrl-names = "default";	
	status = "okay";

	nunchuk@52 {
		compatible = "nintendo,nunchuk";
		reg = <0x52>;
	};
};

&pinctrl {
	usart1_alt_pins: usart1@0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 9, AF7)>; /* USART1_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 10, AF7)>; /* USART1_RX */
			bias-disable;
		};
	};	
	spi3_pins: spi3@0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 12, AF6)>; /* MOSI */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 11, AF6)>; /* MISO */
			bias-disable;
		};
		pins3 {
			pinmux = <STM32_PINMUX('C', 10, AF6)>; /* SCK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};	
	spi3_slave_pins: spi3-slave@0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 12, AF6)>; /* MOSI */
			bias-pull-up;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 11, AF6)>; /* MISO */
			bias-pull-up;
		};
		pins3 {
			pinmux = <STM32_PINMUX('C', 10, AF6)>; /* SCK */
			bias-pull-up;
		};
	};	
	spi3_cs: spi3cs0@0 {
		cs0 {
			pinmux = <STM32_PINMUX('D', 2, GPIO)>; /* SS */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};	
	mmc_spi_pins: mmc_spi@0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 3, GPIO)>; /* card detect */
			bias-pull-up;
		};
	};	
	ltdc_pins: ltdc-gpio@0 {
		/* red */
		pins1 {
			pinmux = <STM32_PINMUX('H', 9, AF14)>; /* R3 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins2 {
			pinmux = <STM32_PINMUX('H', 10, AF14)>; /* R4 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins3 {
			pinmux = <STM32_PINMUX('C', 0, AF14)>; /* R5 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins4 {
			pinmux = <STM32_PINMUX('B', 1, AF14)>; /* R6 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins5 {
			pinmux = <STM32_PINMUX('G', 6, AF14)>; /* R7 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		/* green */
		pins6 {
			pinmux = <STM32_PINMUX('H', 13, AF14)>; /* G2 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins7 {
			pinmux = <STM32_PINMUX('G', 10, AF14)>; /* G3 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins8 {
			pinmux = <STM32_PINMUX('H', 15, AF14)>; /* G4 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins9 {
			pinmux = <STM32_PINMUX('I', 0, AF14)>; /* G5 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins10 {
			pinmux = <STM32_PINMUX('I', 1, AF14)>; /* G6 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins11 {
			pinmux = <STM32_PINMUX('I', 2, AF14)>; /* G7 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		/* blue */
		pins12 {
			pinmux = <STM32_PINMUX('G', 11, AF14)>; /* B3 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins13 {
			pinmux = <STM32_PINMUX('I', 4, AF14)>; /* B4 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins14 {
			pinmux = <STM32_PINMUX('I', 5, AF14)>; /* B5 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins15 {
			pinmux = <STM32_PINMUX('I', 6, AF14)>; /* B6 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		pins16 {
			pinmux = <STM32_PINMUX('I', 7, AF14)>; /* B7 */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		/* vsync */
		pins17 {
			pinmux = <STM32_PINMUX('I', 9, AF14)>; /* VSYNC */
			drive-push-pull;
			slew-rate = <3>;
			
		};
		/* hsync */
		pins18 {
			pinmux = <STM32_PINMUX('I', 10, AF14)>; /* VSYNC */
			drive-push-pull;
			slew-rate = <3>;
			
		};
	};

	ps2_pins: ps2-gpio@0 {
		pins {
			pinmux = <STM32_PINMUX('A', 11, GPIO)>, /* D- */
				 <STM32_PINMUX('A', 12, GPIO)>; /* D+ */
			bias-pull-up;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	i2c2_pins: i2c2-gpio0 {
		pins {
			pinmux = <STM32_PINMUX('H', 4, AF4)>, /* SCL */
				 <STM32_PINMUX('B', 11, AF4)>; /* SDA */
			drive-open-drain;
			slew-rate = <1>;
		};
	};
	usbotg_pins: usbotg-gpios@0 {
		pins {
			pinmux = <STM32_PINMUX('A', 11, AF10)>, // D-
				 <STM32_PINMUX('A', 12, AF10)>; // D+
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
	};
};
